// vim: set syntax=asm :

{% include "fma_mmm_ymm_scalar.tmpliq" label:"scalar_min", op:"vpminsd", from:from, to:to%}
{% include "fma_mmm_ymm_scalar.tmpliq" label:"scalar_max", op:"vpmaxsd", from:from, to:to%}
{% include "fma_mmm_ymm_scalar.tmpliq" label:"scalar_mul", op:"vpmulld", from:from, to:to%}
{% include "fma_mmm_ymm_scalar.tmpliq" label:"scalar_add", op:"vpaddd", from:from, to:to%}
{% include "fma_mmm_ymm_scalar.tmpliq" label:"scalar_sub", op:"vpsubd", from:from, to:to%}
{% include "fma_mmm_ymm_scalar.tmpliq" label:"scalar_sub_flipped", op:"vpsubd", from:from, to:to, flipped: true%}

{{L}}leaky_relu:
    // can only use zmm12 to zmm15
    // ymm15 <- alpha
    vbroadcastss    zmm15, dword ptr [rdi + 8]
    // ymm14 <- all zero
    vpxorq          zmm14, zmm14, zmm14

    {% for reg in (from..to) %}
        // ymm12 <- alpha * x
        vpmulld     zmm12, zmm{{reg}}, zmm15
        vpcmpd      k1, zmm14, zmm{{reg}}, 1 // 1 means LT
        vblendmps   zmm{{reg}} {k1}, zmm12, zmm{{reg}}
    {% endfor %}
    // select muled of orginal

    jmp    {{L}}non_linear_loop
